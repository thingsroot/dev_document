openapi: 3.0.0
servers:
  - url: 'http://localhost/api/v1/'
    description: Local Testing Server
  - url: 'http://ioe.thingsroot.com/api/v1/'
    description: Publish Server
info:
  description: 'This is a thingsroot cloud server. '
  version: 1.0.0
  title: ThingsRoot Cloud Base APIs
  termsOfService: 'http://thingsroot.com/terms/'
  contact:
    email: dirk.chang@thingsroot.com
  license:
    name: MIT
    url: 'https://opensource.org/licenses/MIT'
tags:
  - name: user
    description: Everything about your account
    externalDocs:
      description: Find out more
      url: 'http://thingsroot.com'
  - name: gateways
    description: Everything about your freeioe gateway devices
    externalDocs:
      description: Find out more
      url: 'http://thingsroot.com'
  - name: applications
    description: FreeIOE Application Store
    externalDocs:
      description: Find out more
      url: 'http://freeioe.org'
  - name: configurations
    description: 'Operations about device configuration, application templates'
  - name: companies
    description: 'Operations about device configuration, application templates'
  - name: activities
    description: Platform activities
  - name: events
    description: Device event
  - name: pushers
    description: Cloud Pushers
  - name: store
    description: Cloud Application Store
  - name: xtags
    description: Object tags
paths:
  /user.test:
    get:
      tags:
        - user
      summary: Test api avaiable
      operationId: testUser
      responses:
        '200':
          $ref: '#/components/responses/ApiTestResponse'
        default:
          $ref: '#/components/responses/ApiExceptionResponse'
  /user.create:
    post:
      tags:
        - user
      summary: Create user
      description: For sign up page, when user not logined.
      operationId: createUser
      responses:
        '200':
          $ref: '#/components/responses/ApiResponse'
        default:
          $ref: '#/components/responses/ApiExceptionResponse'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserSignup'
        description: Created user object
        required: true
      parameters: []
  /user.login:
    post:
      tags:
        - user
      summary: Logs user into the system
      description: Login with pasword
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          schema:
            type: string
            format: password
      responses:
        '200':
          $ref: '#/components/responses/ApiResponse'
        default:
          $ref: '#/components/responses/ApiExceptionResponse'
        '501':
          description: Error Num
          content:
            application/json:
              schema:
                type: string
                enum:
                  - username_password_not_matched
  /user.logout:
    post:
      tags:
        - user
      summary: Logs out current logged in user session
      description: ''
      operationId: logoutUser
      responses:
        default:
          description: successful operation
      parameters: []
  /user.csrf_token:
    get:
      tags:
        - user
      summary: Get user csrf_token
      operationId: csrfTokenUser
      responses:
        '200':
          $ref: '#/components/responses/ApiResponse'
        default:
          $ref: '#/components/responses/ApiExceptionResponse'
      parameters: []
  /user.info:
    get:
      tags:
        - user
      summary: Get user information
      description: Get user information after logined.
      operationId: getUserInfo
      responses:
        '200':
          $ref: '#/components/responses/ApiResponse'
        default:
          $ref: '#/components/responses/ApiExceptionResponse'
  /user.update:
    get:
      tags:
        - user
      summary: Update user information
      description: Update your account information after logined.
      operationId: updateUserInfo
      requestBody:
        required: true
        description: User information object
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: Email address
                phone:
                  type: string
                  format: phone
                  description: Phone number
                first_name:
                  type: string
                  description: First name
                last_name:
                  type: string
                  description: Last name
      responses:
        '200':
          $ref: '#/components/responses/ApiResponse'
        default:
          description: Error enums
          content:
            application/json:
              schema:
                type: string
                enum:
                  - no_permission
                  - exception
  /user.update_password:
    post:
      tags:
        - user
      summary: Update user password
      description: Reset user password with reset key or with logged in session
      operationId: updatePassword
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                new_password:
                  type: string
                logout_all_sessions:
                  type: integer
                  enum:
                    - 0
                    - 1
                key:
                  type: string
                  description: Password reset key
                old_password:
                  type: string
                  description: Password reset key
      responses:
        '200':
          $ref: '#/components/responses/ApiResponse'
        default:
          description: Error enums
          content:
            application/json:
              schema:
                type: string
                enum: 
                  - exeception
                  - reset_key_required
                  - reset_key_incorrect 
                  - update_password_failed
      parameters: []
  /user.reset_password:
    post:
      tags:
        - user
      summary: Reset user password
      description: Server will send password reset email to your email box
      operationId: resetPassword
      responses:
        '200':
          $ref: '#/components/responses/ApiResponse'
        default:
          description: Error enums
          content:
            application/json:
              schema:
                type: string
                enum: 
                  - guest_not_allowed
                  - not_allowed
                  - user_disabled
                  - user_not_found
      parameters:
        - name: email
          in: query
          required: true
          schema:
            type: string
  /user.token.create:
    post:
      tags:
        - user
      summary: Create user auth token
      operationId: createUserToken
      responses:
        '200':
          $ref: '#/components/responses/ApiResponse'
        default:
          description: Error enums
          content:
            application/json:
              schema:
                type: string
                enum: 
                  - exception
                  - authorization_code_exists
                  - authorization_code_created
      parameters: []
  /user.token.info:
    get:
      tags:
        - user
      summary: Get user auth token
      description: Get user auth token for access apis in your client instead of cookies
      operationId: getUserToken
      responses:
        '200':
          $ref: '#/components/responses/ApiResponse'
        default:
          description: Error enums
          content:
            application/json:
              schema:
                type: string
                enum: 
                  - exception
                  - authorization_code_not_exists
      parameters: []
  /user.token.update:
    get:
      tags:
        - user
      summary: Update user auth token
      operationId: updateUserToken
      responses:
        '200':
          $ref: '#/components/responses/ApiResponse'
        default:
          description: Error enums
          content:
            application/json:
              schema:
                type: string
                enum: 
                  - exception
                  - authorization_code_not_exists
      parameters: []
  /user.token.remove:
    get:
      tags:
        - user
      summary: Remove user auth token
      operationId: removeUserToken
      responses:
        '200':
          $ref: '#/components/responses/ApiResponse'
        default:
          description: Error enums
          content:
            application/json:
              schema:
                type: string
                enum: 
                  - exception
                  - authorization_code_not_exists
                  - auth_code_removed
      parameters: []
  /user.virtual_gateways.list:
    get:
      tags:
        - user
      summary: List virtual gateway sn
      operationId: listUserGateway
      responses:
        '200':
          $ref: '#/components/responses/ApiResponse'
        default:
          $ref: '#/components/responses/ApiExceptionResponse'
  /user.virtual_gateways.create:
    get:
      tags:
        - user
      summary: Create virtual gateway sn
      operationId: createUserGateway
      responses:
        '200':
          $ref: '#/components/responses/ApiResponse'
        default:
          $ref: '#/components/responses/ApiExceptionResponse'
        '501':
          description: Error enums
          content:
            application/json:
              schema:
                type: string
                enum: 
                  - exception
                  - virtual_gateway_created
  /user.virtual_gateways.info:
    get:
      tags:
        - user
      summary: Get virtual gateway information
      operationId: getUserGatewayInfo
      responses:
        '200':
          $ref: '#/components/responses/ApiResponse'
        default:
          $ref: '#/components/responses/ApiExceptionResponse'
        '501':
          description: Error enums
          content:
            application/json:
              schema:
                type: string
                enum: 
                  - exception
                  - virtual_gateway_created
                  - has_no_permission
  /{category}.activities.list:
    get:
      tags:
        - activities
      summary: Get activities
      operationId: listActivity
      parameters:
        - name: category
          in: path
          description: Activity category
          required: true
          schema:
            type: string
            enum:
              - user
              - companies
              - gateways
        - name: name
          in: query
          description: Activity category id
          required: true
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/ApiResponse'
        default:
          $ref: '#/components/responses/ApiExceptionResponse'
        '501':
          description: Error enums
          content:
            application/json:
              schema:
                type: string
                enum: 
                  - exception
                  - has_no_permission
  /{category}.activities.count:
    get:
      tags:
        - activities
      summary: Get activities count
      operationId: countActivity
      parameters:
        - name: category
          in: path
          description: Activity category
          required: true
          schema:
            type: string
            enum:
              - user
              - companies
              - gateways
        - name: name
          in: query
          description: Activity category id
          required: true
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/ApiResponse'
        default:
          $ref: '#/components/responses/ApiExceptionResponse'
        '501':
          description: Error enums
          content:
            application/json:
              schema:
                type: string
                enum: 
                  - exception
                  - has_no_permission
  /{category}.activities.info:
    get:
      tags:
        - activities
      summary: Get detailed activity information
      operationId: getActivityInfo
      parameters:
        - name: category
          in: path
          description: Activity category
          required: true
          schema:
            type: string
            enum:
              - user
              - companies
              - gateways
        - name: name
          in: query
          description: Activity id
          required: true
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/ApiResponse'
        default:
          $ref: '#/components/responses/ApiExceptionResponse'
        '501':
          description: Error enums
          content:
            application/json:
              schema:
                type: string
                enum: 
                  - exception
                  - has_no_permission
  /{category}.activities.disponse:
    get:
      tags:
        - activities
      summary: Disponse the activity
      operationId: disponseActivity
      parameters:
        - name: category
          in: path
          description: Activity category
          required: true
          schema:
            type: string
            enum:
              - user
              - companies
              - gateways
        - name: name
          in: query
          description: Activity id
          required: true
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/ApiResponse'
        default:
          $ref: '#/components/responses/ApiExceptionResponse'
        '501':
          description: Error enums
          content:
            application/json:
              schema:
                type: string
                enum: 
                  - exception
                  - has_no_permission
  /{category}.events.list:
    get:
      tags:
        - events
      summary: Get events
      operationId: listEvent
      parameters:
        - name: category
          in: path
          description: Event category
          required: true
          schema:
            type: string
            enum:
              - user
              - companies
              - gateways
        - name: name
          in: query
          description: Event category id
          required: true
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/ApiResponse'
        default:
          $ref: '#/components/responses/ApiExceptionResponse'
        '501':
          description: Error enums
          content:
            application/json:
              schema:
                type: string
                enum: 
                  - exception
                  - has_no_permission
  /{category}.events.count:
    get:
      tags:
        - activities
      summary: Get events count
      operationId: countEvent
      parameters:
        - name: category
          in: path
          description: Event category
          required: true
          schema:
            type: string
            enum:
              - user
              - companies
              - gateways
        - name: name
          in: query
          description: Event category id
          required: true
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/ApiResponse'
        default:
          $ref: '#/components/responses/ApiExceptionResponse'
        '501':
          description: Error enums
          content:
            application/json:
              schema:
                type: string
                enum: 
                  - exception
                  - has_no_permission
  /{category}.events.info:
    get:
      tags:
        - activities
      summary: Get event detailed information 
      operationId: getEventInfo
      parameters:
        - name: category
          in: path
          description: Event category
          required: true
          schema:
            type: string
            enum:
              - user
              - companies
              - gateways
        - name: name
          in: query
          description: Event id
          required: true
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/ApiResponse'
        default:
          $ref: '#/components/responses/ApiExceptionResponse'
        '501':
          description: Error enums
          content:
            application/json:
              schema:
                type: string
                enum: 
                  - exception
                  - has_no_permission
  /{category}.event.disponse:
    get:
      tags:
        - activities
      summary: Disponse event
      operationId: disponseEvent
      parameters:
        - name: category
          in: path
          description: Event category
          required: true
          schema:
            type: string
            enum:
              - user
              - companies
              - gateways
        - name: name
          in: query
          description: Event id
          required: true
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/ApiResponse'
        default:
          $ref: '#/components/responses/ApiExceptionResponse'
        '501':
          description: Error enums
          content:
            application/json:
              schema:
                type: string
                enum: 
                  - exception
                  - has_no_permission
  /{object}.tags.list:
    get:
      tags:
        - xtags
      summary: Get object tags 
      operationId: listTags
      parameters:
        - name: object
          in: path
          description: Object type
          required: true
          schema:
            type: string
            enum:
              - gateways
              - applications
              - configurations
        - name: name
          in: query
          description: Object id
          required: true
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/ApiResponse'
        default:
          $ref: '#/components/responses/ApiExceptionResponse'
        '501':
          description: Error enums
          content:
            application/json:
              schema:
                type: string
                enum: 
                  - exception
  /{object}.tags.create:
    get:
      tags:
        - xtags
      summary: Create tags for specified object
      operationId: createTags
      parameters:
        - name: object
          in: path
          description: Object type
          required: true
          schema:
            type: string
            enum:
              - gateways
              - applications
              - configurations
        - name: name
          in: query
          description: Object ID
          required: true
          schema:
            type: string
        - name: tags
          in: query
          description: tags to remove
          required: true
          schema:
            type: array
            items:
              type: string

      responses:
        '200':
          $ref: '#/components/responses/ApiResponse'
        default:
          $ref: '#/components/responses/ApiExceptionResponse'
        '501':
          description: Error enums
          content:
            application/json:
              schema:
                type: string
                enum: 
                  - exception
                  - has_no_permission
  /{object}.tags.remove:
    get:
      tags:
        - xtags
      summary: Remove tags from object
      operationId: removeTags
      parameters:
        - name: object
          in: path
          description: Object Type
          required: true
          schema:
            type: string
            enum:
              - gateways
              - applications
              - configurations
        - name: name
          in: query
          description: Object ID
          required: true
          schema:
            type: string
        - name: tags
          in: query
          description: tags to remove
          required: true
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          $ref: '#/components/responses/ApiResponse'
        default:
          $ref: '#/components/responses/ApiExceptionResponse'
        '501':
          description: Error enums
          content:
            application/json:
              schema:
                type: string
                enum: 
                  - exception
                  - has_no_permission
  /{object}.tags.clear:
    get:
      tags:
        - xtags
      summary: Clear all tags from object
      operationId: clearTags
      parameters:
        - name: object
          in: path
          description: Object Type
          required: true
          schema:
            type: string
            enum:
              - gateways
              - applications
              - configurations
        - name: name
          in: query
          description: Object ID
          required: true
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/ApiResponse'
        default:
          $ref: '#/components/responses/ApiExceptionResponse'
        '501':
          description: Error enums
          content:
            application/json:
              schema:
                type: string
                enum: 
                  - exception
                  - has_no_permission
  /gateways.test:
    post:
      tags:
        - gateways
      summary: Check whether the api is available or not
      operationId: apiGatewayTest
      requestBody:
        $ref: '#/components/requestBodies/Gateway'
      responses:
        '200':
          $ref: '#/components/responses/ApiResponse'
      parameters: []
  /gateways.list:
    get:
      tags:
        - gateways
      summary: Get user gateway list
      operationId: listGateway
      responses:
        '200':
          $ref: '#/components/responses/ApiResponse'
        default:
          $ref: '#/components/responses/ApiExceptionResponse'
  /gateways.create:
    post:
      tags:
        - gateways
      summary: Add a new gateway device to your gateway list
      operationId: addGateway
      requestBody:
        $ref: '#/components/requestBodies/GatewayNew'
      responses:
        '200':
          $ref: '#/components/responses/ApiResponse'
        default:
          $ref: '#/components/responses/ApiExceptionResponse'
  /gateways.update:
    post:
      tags:
        - gateways
      summary: Update gateway device information
      operationId: updateGateway
      requestBody:
        $ref: '#/components/requestBodies/Gateway'
      responses:
        '200':
          $ref: '#/components/responses/ApiResponse'
        default:
          $ref: '#/components/responses/ApiExceptionResponse'
  /gateways.info:
    get:
      tags:
        - gateways
      summary: Query gateway infomration
      operationId: queryGateway
      parameters:
        - name: name
          in: query
          description: Gateway ID ( serial number )
          required: true
          schema:
            type: string
            default: xxxxxxxxxx
      responses:
        '200':
          $ref: '#/components/responses/ApiResponse'
        default:
          $ref: '#/components/responses/ApiExceptionResponse'
  /gateways.remove:
    post:
      tags:
        - gateways
      summary: Remove gateway from your gateway list
      operationId: removeGateway
      parameters:
        - name: devices
          in: query
          description: Gateway ID ( serial number )
          required: true
          explode: true
          schema:
            type: string
            default: xxxxxxxxxx
      responses:
        '200':
          $ref: '#/components/responses/ApiResponse'
        default:
          $ref: '#/components/responses/ApiExceptionResponse'
  /gateways.exec_result:
    get:
      tags:
        - gateways
      summary: Get output/command execution result
      operationId: getGatewayDeviceExecutionResult
      parameters:
        - name: gateway
          in: query
          description: Gateway ID
          required: true
          schema:
            type: string
        - name: id
          in: query
          description: Execution ID
          required: true
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/ApiResponse'
        default:
          $ref: '#/components/responses/ApiExceptionResponse'
  /gateways.applications.list:
    get:
      tags:
        - gateways
      summary: Get application list
      operationId: listGatewayApplication
      parameters:
        - name: gateway
          in: query
          description: Gateway ID
          required: true
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/ApiResponse'
        default:
          $ref: '#/components/responses/ApiExceptionResponse'
  /gateways.applications.info:
    get:
      tags:
        - gateways
      summary: Get application information
      operationId: getGatewayApplicationInfo
      parameters:
        - name: gateway
          in: query
          description: Gateway ID
          required: true
          schema:
            type: string
        - name: name
          in: query
          description: Application instance ID
          required: true
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/ApiResponse'
        default:
          $ref: '#/components/responses/ApiExceptionResponse'
  /gateways.applications.install:
    post:
      tags:
        - gateways
      summary: Install application to gateway
      operationId: installGatewayApplication
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                gateway:
                  type: string                
                  description: Gateway ID ( serial number )
                name:
                  type: string
                  description: Application instance ID
                app:
                  type: string
                  description: Application ID in store
                version:
                  type: integer
                  description: Application version in store
                conf:
                  type: object
                  description: Application Configuration object
                id:
                  type: string
                  description: Execution ID for tracking result
      responses:
        '200':
          $ref: '#/components/responses/ApiResponse'
        default:
          $ref: '#/components/responses/ApiExceptionResponse'
  /gateways.applications.remove:
    post:
      tags:
        - gateways
      summary: Remove gateway application
      operationId: removeGatewayApplication
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                gateway:
                  type: string                
                  description: Gateway ID ( serial number )
                name:
                  type: string
                  description: Application instance ID
                id:
                  type: string
                  description: Execution ID for tracking result
      responses:
        '200':
          $ref: '#/components/responses/ApiResponse'
        default:
          $ref: '#/components/responses/ApiExceptionResponse'
  /gateways.applications.conf:
    post:
      tags:
        - gateways
      summary: Set configuration for application
      operationId: setGatewayApplicationConf
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                gateway:
                  type: string                
                  description: Gateway ID ( serial number )
                name:
                  type: string
                  description: Application instance ID
                conf:
                  type: object
                  description: Application Configuration object
                id:
                  type: string
                  description: Execution ID for tracking result
      responses:
        '200':
          $ref: '#/components/responses/ApiResponse'
        default:
          $ref: '#/components/responses/ApiExceptionResponse'
  /gateways.applications.start:
    post:
      tags:
        - gateways
      summary: Trigger application start to run
      operationId: startGatewayApplication
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                gateway:
                  type: string                
                  description: Gateway ID ( serial number )
                name:
                  type: string
                  description: Application instance ID
                id:
                  type: string
                  description: Execution ID for tracking result
      responses:
        '200':
          $ref: '#/components/responses/ApiResponse'
        default:
          $ref: '#/components/responses/ApiExceptionResponse'
  /gateways.applications.stop:
    post:
      tags:
        - gateways
      summary: Trigger application stop from running
      operationId: stopGatewayApplication
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                gateway:
                  type: string                
                  description: Gateway ID ( serial number )
                name:
                  type: string
                  description: Application instance ID
                id:
                  type: string
                  description: Execution ID for tracking result
      responses:
        '200':
          $ref: '#/components/responses/ApiResponse'
        default:
          $ref: '#/components/responses/ApiExceptionResponse'
  /gateways.applications.upgrade:
    post:
      tags:
        - gateways
      summary: Upgrade the install application in gateway
      operationId: upgradeGatewayApplication
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                gateway:
                  type: string                
                  description: Gateway ID ( serial number )
                name:
                  type: string
                  description: Application instance ID
                app:
                  type: string
                  description: Application ID in store
                version:
                  type: integer
                  description: Application version in store
                conf:
                  type: object
                  description: Application Configuration object
                id:
                  type: string
                  description: Execution ID for tracking result
      responses:
        '200':
          $ref: '#/components/responses/ApiResponse'
        default:
          $ref: '#/components/responses/ApiExceptionResponse'
  /gateways.beta.info:
    get:
      tags:
        - gateways
      summary: Get beta mode information
      operationId: getGatewayBetaInfo
      parameters:
        - name: gateway
          in: query
          description: Gateway ID
          required: true
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/ApiResponse'
        default:
          $ref: '#/components/responses/ApiExceptionResponse'
  /gateways.beta.enable:
    post:
      tags:
        - gateways
      summary: Enable beta mode
      operationId: enableBetaMode
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                gateway:
                  type: string                
                  description: Gateway ID ( serial number )
      responses:
        '200':
          $ref: '#/components/responses/ApiResponse'
        default:
          $ref: '#/components/responses/ApiExceptionResponse'
  /gateways.devices.list:
    get:
      tags:
        - gateways
      summary: Get devices objects in specified gateway
      operationId: listGatewayDevices
      parameters:
        - name: gateway
          in: query
          description: Gateway ID
          required: true
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/ApiResponse'
        default:
          $ref: '#/components/responses/ApiExceptionResponse'
  /gateways.devices.info:
    get:
      tags:
        - gateways
      summary: Get devices object detail information
      operationId: listGatewayDevices
      parameters:
        - name: gateway
          in: query
          description: Gateway ID
          required: true
          schema:
            type: string
        - name: name
          in: query
          description: Device ID
          required: true
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/ApiResponse'
        default:
          $ref: '#/components/responses/ApiExceptionResponse'
  /gateways.devices.data:
    get:
      tags:
        - gateways
      summary: Get devices object input data information
      operationId: listGatewayDeviceInputs
      parameters:
        - name: gateway
          in: query
          description: Gateway ID
          required: true
          schema:
            type: string
        - name: name
          in: query
          description: Device ID
          required: true
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/ApiResponse'
        default:
          $ref: '#/components/responses/ApiExceptionResponse'
  /gateways.devices.output:
    post:
      tags:
        - gateways
      summary: Set output prop value for sepecified device
      operationId: outputGatewayDeviceProp
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                gateway:
                  type: string                
                  description: Gateway ID ( serial number )
                name:
                  type: string
                  description: Device ID
                output:
                  type: string
                  description: Device output ID
                prop:
                  type: string
                  description: Device output property ID
                value:
                  type: any
                  description: Output value
                id:
                  type: string
                  description: Execution ID for tracking the result
      responses:
        '200':
          $ref: '#/components/responses/ApiResponse'
        default:
          $ref: '#/components/responses/ApiExceptionResponse'
  /gateways.devices.command:
    post:
      tags:
        - gateways
      summary: Send command for sepecified device
      operationId: commandGatewayDeviceProp
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                gateway:
                  type: string                
                  description: Gateway ID ( serial number )
                name:
                  type: string
                  description: Device ID
                command:
                  type: string
                  description: Device command ID
                param:
                  type: any
                  description: Command parameters
                id:
                  type: string
                  description: Execution ID for tracking the result
      responses:
        '200':
          $ref: '#/components/responses/ApiResponse'
        default:
          $ref: '#/components/responses/ApiExceptionResponse'
  /batch_tasks.list:
    get:
      tags:
        - batch_tasks
      summary: Get gateway batch tasks list
      operationId: listBatchTasks
      parameters: []
      responses:
        '200':
          $ref: '#/components/responses/ApiResponse'
        default:
          $ref: '#/components/responses/ApiExceptionResponse'
  /batch_tasks.create:
    post:
      tags:
        - batch_tasks
      summary: Create batch task
      operationId: createBatchTask
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                task_name:
                  type: string                
                  description: Task readable name
                description:
                  type: string
                  description: Task description
                timeout:
                  type: integer
                  description: Task run timeout
                script:
                  type: string
                  description: Task script content
                gateways:
                  type: array
                  description: Gateway ID list
                  items:
                    type: string
      responses:
        '200':
          $ref: '#/components/responses/ApiResponse'
        default:
          $ref: '#/components/responses/ApiExceptionResponse'
  /batch_tasks.info:
    get:
      tags:
        - batch_tasks
      summary: Get batch task information
      operationId: getBatchTaskInfo
      parameters:
        - name: name
          in: query
          description: Batch Task ID
          required: true
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/ApiResponse'
        default:
          $ref: '#/components/responses/ApiExceptionResponse'
  /batch_tasks.status:
    post:
      tags:
        - batch_tasks
      summary: Get Batch Task status
      operationId: getBatchTaskStatus
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Batch Task ID
                update:
                  type: boolean
                  description: Trigger task status update if True, or only read the status.
      responses:
        '200':
          $ref: '#/components/responses/ApiResponse'
        default:
          $ref: '#/components/responses/ApiExceptionResponse'
  /store.list:
    get:
      tags:
        - store
      summary: Get applications
      operationId: getStoreApplicationList
      parameters:
        - name: name
          description: Application ID    
          required: true
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          $ref: '#/components/responses/ApiResponse'
        default:
          $ref: '#/components/responses/ApiExceptionResponse'
  /store.info:
    get:
      tags:
        - store
      summary: Get application information
      operationId: getStoreApplicationInfo
      parameters:
        - name: name
          description: Application ID    
          required: true
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/ApiResponse'
        default:
          $ref: '#/components/responses/ApiExceptionResponse'
  /store.{operation}.list:
    get:
      tags:
        - xtags
      summary: Get store operation object list 
      operationId: listStoreOperationObjects
      parameters:
        - name: operation
          in: path
          description: Operation type
          required: true
          schema:
            type: string
            enum:
              - comments
              - issues
              - reviews
        - name: app
          in: query
          description: Application ID
          required: true
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/ApiResponse'
        default:
          $ref: '#/components/responses/ApiExceptionResponse'
        '501':
          description: Error enums
          content:
            application/json:
              schema:
                type: string
                enum: 
                  - exception
  /store.{operation}.create:
    get:
      tags:
        - xtags
      summary: Create store {operation} object
      operationId: createStoreOperationObject
      parameters:
        - name: operation
          in: path
          description: Operation type
          required: true
          schema:
            type: string
            enum:
              - comments
              - issues
              - reviews
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                app:
                  type: string                
                  description: Application id
      responses:
        '200':
          $ref: '#/components/responses/ApiResponse'
        default:
          $ref: '#/components/responses/ApiExceptionResponse'
        '501':
          description: Error enums
          content:
            application/json:
              schema:
                type: string
                enum: 
                  - exception
  /store.{operation}.info:
    get:
      tags:
        - xtags
      summary: Get store {operation} object information
      operationId: getStoreOperationObjectInformation
      parameters:
        - name: operation
          in: path
          description: Operation type
          required: true
          schema:
            type: string
            enum:
              - comments
              - issues
              - reviews
        - name: name
          in: query
          description: Operation Object ID
          required: true
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/ApiResponse'
        default:
          $ref: '#/components/responses/ApiExceptionResponse'
        '501':
          description: Error enums
          content:
            application/json:
              schema:
                type: string
                enum: 
                  - exception
  /store.{operation}.update:
    get:
      tags:
        - xtags
      summary: Update store operation object information
      operationId: updateStoreOperationObjectInformation
      parameters:
        - name: operation
          in: path
          description: Operation type
          required: true
          schema:
            type: string
            enum:
              - comments
              - issues
              - reviews
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string                
                  description: Operation Object id
      responses:
        '200':
          $ref: '#/components/responses/ApiResponse'
        default:
          $ref: '#/components/responses/ApiExceptionResponse'
        '501':
          description: Error enums
          content:
            application/json:
              schema:
                type: string
                enum: 
                  - exception
  /store.{operation}.remove:
    get:
      tags:
        - xtags
      summary: Remove store {operation} object
      operationId: removeStoreOperationObject
      parameters:
        - name: operation
          in: path
          description: Operation type
          required: true
          schema:
            type: string
            enum:
              - comments
              - issues
              - reviews
        - name: name
          in: query
          description: Operation Object ID
          required: true
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/ApiResponse'
        default:
          $ref: '#/components/responses/ApiExceptionResponse'
        '501':
          description: Error enums
          content:
            application/json:
              schema:
                type: string
                enum: 
                  - exception
externalDocs:
  description: See ThingsRoot API example
  url: 'https://thingsroot.com/api/example.html'
components:
  schemas:
    Company:
      type: object
      properties:
        name:
          type: string
          description: 'Company id, the company short name'
    GatewayNew:
      type: object
      properties:
        name:
          type: string
          description: Gateway devce serial number.
        device_name:
          type: string
          description: Gateway device name specified by user.
        description:
          type: string
          description: Gateway device description sepcified by user.
        owner_type:
          type: string
          description: Owner type
          enum:
            - User
            - Cloud Company Group
          default: User
        owner_id:
          type: string
          description: Onwer ID
    Gateway:
      type: object
      properties:
        name:
          type: string
          description: Gateway device id (serial number).
        sn:
          type: string
          description: Gateway device serial number
        device_name:
          type: string
          description: Gateway device name specified by user.
        description:
          type: string
          description: Gateway device description sepcified by user.
        enabled:
          type: integer
          description: Gateway device enabled for not (0 is not)
          enum:
            - 0
            - 1
        company:
          type: string
          description: Gateway device owner company name(id)
        owner_type:
          type: string
          description: Gateway device owner type
          enum:
            - User
            - Cloud Company Group
        owner_id:
          type: string
          description: Gateway device owner id
        longitude:
          type: string
        latitude:
          type: string
        device_status:
          type: string
          description: Gateway device online status
          enum:
            - ONLINE
            - OFFLINE
        last_updated:
          type: string
          format: date-time
          description: Last device updated time.
        use_beta:
          type: integer
          description: Has device enabled beta mode or not
        use_beta_start_time:
          type: string
          format: date-time
          description: The beta mold enable time
    UserSignup:
      type: object
      properties:
        email:
          type: email
          description: User email
        full_name:
          type: string
          description: User fullname
    User:
      type: object
      properties:
        name:
          type: string
          description: Username
        csrf_token:
          type: string
          description: CSRF Token
        groups:
          type: array
          description: Company Groups ID list
        companies:
          type: array
          description: Company ID list
        email:
          type: string
          format: email
        password:
          type: string
        phone:
          type: string
        first_name:
          type: string
        last_name:
          type: string
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: Tag
    ApiResponseOK:
      type: object
      properties:
        ok:
          type: boolean
        info:
          type: string
        data:
          type: any
    ApiResponseOK_Warning:
      type: object
      properties:
        ok:
          type: boolean
        warning:
          type: string
        data:
          type: any
    ApiResponseOK_Warnings:
      type: object
      properties:
        ok:
          type: boolean
        error:
          type: string
        warning:
          type: array
          items:
              type: string
        data:
          type: object
    ApiResponseOK_Error:
      type: object
      properties:
        ok:
          type: boolean
        error:
          type: string
        exception:
          type: string
    ApiResponse:
      oneOf:
        - $ref: '#/components/schemas/ApiResponseOK'
        - $ref: '#/components/schemas/ApiResponseOK_Warning'
        - $ref: '#/components/schemas/ApiResponseOK_Warnings'
        - $ref: '#/components/schemas/ApiResponseOK_Error'
    ApiTestResponse:
      type: object
      properties:
        ok:
          type: boolean
        data:
          type: string
        source:
          type: string
    ApiExceptionResponse:
      type: object
      properties:
        exc:
          type: string
  requestBodies:
    UserSignup:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UserSignup'
      description: New user information object
      required: true
    GatewayNew:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GatewayNew'
      description: New gateway infomation object
      required: true
    Gateway:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Gateway'
      description: Gateway infomation object
      required: true
    UserArray:
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
      description: List of user object
      required: true
  responses:
    ApiResponse:
      description: successful operation
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiResponse'
    ApiTestResponse:
      description: successful operation from test apis
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiTestResponse'
    ApiExceptionResponse:
      description: operation exception result repsonse
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiExceptionResponse'
  securitySchemes:
    auth_code:
      type: apiKey
      name: AuthorizationCode
      in: header
  links: {}
  callbacks: {}
security:
  - auth_code: []
